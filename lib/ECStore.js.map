{
  "version": 3,
  "sources": ["../src/ECStore.ts"],
  "sourcesContent": ["/* eslint-disable no-param-reassign,@typescript-eslint/no-non-null-assertion */\n\nexport default class ECStore<TEntity extends object & { id: string }> {\n  entities: Record<string, Partial<TEntity>>;\n\n  components: Record<keyof TEntity, Partial<TEntity>[]>;\n\n  constructor() {\n    this.components = {} as Record<keyof TEntity, Partial<TEntity>[]>;\n\n    const entitiesData: Record<string, TEntity> = {};\n    this.entities = new Proxy(entitiesData, {\n      get: (entities, id: string) => {\n        let entityProxy = entities[id];\n        if (!entityProxy) {\n          entityProxy = new Proxy({ id } as unknown as TEntity, {\n            set: (<Key extends keyof TEntity>(target: TEntity, key: Key, value: TEntity[Key]) => {\n              if (key === 'id') return false;\n              if (value === undefined) {\n                if (this.components[key]) {\n                  const index = this.components[key]!.indexOf(entityProxy);\n                  if (index !== -1) this.components[key]!.splice(index, 1);\n                }\n                delete target[key];\n              } else {\n                if (!this.components[key]) this.components[key] = [];\n                const index = this.components[key]!.indexOf(entityProxy);\n                if (index === -1) this.components[key]!.push(entityProxy);\n\n                target[key] = value;\n              }\n              return true;\n            }) as (target: TEntity, propertyKey: string | symbol, value: unknown, receiver: unknown) => boolean,\n            deleteProperty: (<Key extends keyof TEntity>(object: TEntity, key: Key) => {\n              if (this.components[key]) {\n                const index = this.components[key]!.indexOf(entityProxy);\n                if (index !== -1) this.components[key]!.splice(index, 1);\n              }\n              delete object[key];\n              return true;\n            }) as (target: TEntity, p: string | symbol) => boolean,\n          });\n\n          entities[id] = entityProxy;\n        }\n        return entityProxy;\n      },\n\n      set: (_, id: string, entity: Record<keyof TEntity, TEntity[keyof TEntity] | null>) => {\n        const entityProxy = this.entities[id];\n\n        Object.keys(entity).forEach(((key: keyof TEntity) => {\n          if (key === 'id') return;\n          const value = entity[key] as TEntity[keyof TEntity];\n          if (value === null) delete entityProxy[key];\n          else entityProxy[key] = value;\n        }) as ($0: string) => void);\n\n        return true;\n      },\n\n      deleteProperty: (entityData, id: string) => {\n        if (!(id in this.entities)) return false;\n        const entityDatum = entityData[id];\n        Object.keys(entityDatum).forEach((<Key extends keyof TEntity>(key: Key) => {\n          if (this.components[key]) {\n            const index = this.components[key]!.indexOf(entityDatum);\n            if (index !== -1) this.components[key]!.splice(index, 1);\n          }\n        }) as ($0: string) => void);\n        delete entityData[id];\n        return true;\n      },\n    });\n  }\n\n  addCount = 0;\n\n  add(...entities: Partial<TEntity>[]) {\n    const ids: string[] = [];\n    if (!entities.length) return ids;\n    if (entities.length === 1) {\n      const id = (entities[0] as unknown as { id: string }).id || `auto-generated ${this.addCount}`;\n      ids.push(id);\n      this.entities[id] = { ...entities[0] };\n    } else {\n      for (let i = 0; i < entities.length; i += 1) {\n        const id = (entities[i] as unknown as { id: string }).id || `auto-generated ${this.addCount}.${i}`;\n        ids.push(id);\n        this.entities[id] = { ...entities[i] };\n      }\n    }\n    this.addCount += 1;\n    return ids;\n  }\n\n  delete(...entities: Partial<TEntity>[]) {\n    const out: Partial<TEntity>[] = [];\n    for (let i = 0; i < entities.length; i += 1) {\n      out.push({ ...entities[i] });\n      const { id } = entities[i] as unknown as { id: string };\n      if (id && this.entities[id]) delete this.entities[id];\n    }\n    return out;\n  }\n}\n"],
  "mappings": "8gBAAA,8BAEA,WAAsE,CACpE,SAEA,WAEA,aAAc,CACZ,KAAK,WAAa,GAElB,GAAM,GAAwC,GAC9C,KAAK,SAAW,GAAI,OAAM,EAAc,CACtC,IAAK,CAAC,EAAU,IAAe,CAC7B,GAAI,GAAc,EAAS,GAC3B,MAAK,IACH,GAAc,GAAI,OAAM,CAAE,MAA4B,CACpD,IAAM,CAA4B,EAAiB,EAAU,IAAwB,CACnF,GAAI,IAAQ,KAAM,MAAO,GACzB,GAAI,IAAU,OAAW,CACvB,GAAI,KAAK,WAAW,GAAM,CACxB,GAAM,GAAQ,KAAK,WAAW,GAAM,QAAQ,GAC5C,AAAI,IAAU,IAAI,KAAK,WAAW,GAAM,OAAO,EAAO,GAExD,MAAO,GAAO,OAEd,AAAK,MAAK,WAAW,IAAM,MAAK,WAAW,GAAO,IAE9C,AADU,KAAK,WAAW,GAAM,QAAQ,KAC9B,IAAI,KAAK,WAAW,GAAM,KAAK,GAE7C,EAAO,GAAO,EAEhB,MAAO,IAET,eAAiB,CAA4B,EAAiB,IAAa,CACzE,GAAI,KAAK,WAAW,GAAM,CACxB,GAAM,GAAQ,KAAK,WAAW,GAAM,QAAQ,GAC5C,AAAI,IAAU,IAAI,KAAK,WAAW,GAAM,OAAO,EAAO,GAExD,aAAO,GAAO,GACP,MAIX,EAAS,GAAM,GAEV,GAGT,IAAK,CAAC,EAAG,EAAY,IAAiE,CACpF,GAAM,GAAc,KAAK,SAAS,GAElC,cAAO,KAAK,GAAQ,QAAS,AAAC,GAAuB,CACnD,GAAI,IAAQ,KAAM,OAClB,GAAM,GAAQ,EAAO,GACrB,AAAI,IAAU,KAAM,MAAO,GAAY,GAClC,EAAY,GAAO,IAGnB,IAGT,eAAgB,CAAC,EAAY,IAAe,CAC1C,GAAI,CAAE,KAAM,MAAK,UAAW,MAAO,GACnC,GAAM,GAAc,EAAW,GAC/B,cAAO,KAAK,GAAa,QAAS,AAA4B,GAAa,CACzE,GAAI,KAAK,WAAW,GAAM,CACxB,GAAM,GAAQ,KAAK,WAAW,GAAM,QAAQ,GAC5C,AAAI,IAAU,IAAI,KAAK,WAAW,GAAM,OAAO,EAAO,MAG1D,MAAO,GAAW,GACX,MAKb,SAAW,EAEX,OAAO,EAA8B,CACnC,GAAM,GAAgB,GACtB,GAAI,CAAC,EAAS,OAAQ,MAAO,GAC7B,GAAI,EAAS,SAAW,EAAG,CACzB,GAAM,GAAM,EAAS,GAAiC,IAAM,kBAAkB,KAAK,WACnF,EAAI,KAAK,GACT,KAAK,SAAS,GAAM,IAAK,EAAS,QAElC,QAAS,GAAI,EAAG,EAAI,EAAS,OAAQ,GAAK,EAAG,CAC3C,GAAM,GAAM,EAAS,GAAiC,IAAM,kBAAkB,KAAK,YAAY,IAC/F,EAAI,KAAK,GACT,KAAK,SAAS,GAAM,IAAK,EAAS,IAGtC,YAAK,UAAY,EACV,EAGT,UAAU,EAA8B,CACtC,GAAM,GAA0B,GAChC,OAAS,GAAI,EAAG,EAAI,EAAS,OAAQ,GAAK,EAAG,CAC3C,EAAI,KAAK,IAAK,EAAS,KACvB,GAAM,CAAE,MAAO,EAAS,GACxB,AAAI,GAAM,KAAK,SAAS,IAAK,MAAO,MAAK,SAAS,GAEpD,MAAO",
  "names": []
}
